/*
Event Model

OpenAPI definition for the Kafka Message Event entity.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/google/uuid"
	"time"
	"bytes"
	"fmt"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event Domain event carrying payload, context, and metadata. 
type Event struct {
	// Unique identifier for the event.
	Id uuid.UUID `json:"id"`
	// Correlation/session identifier.
	SessionId uuid.UUID `json:"session_id"`
	// Upstream request identifier.
	RequestId uuid.UUID `json:"request_id"`
	// Tenant identifier.
	TenantId uuid.UUID `json:"tenant_id"`
	// Optional owner id.
	OwnerId *uuid.UUID `json:"owner_id,omitempty"`
	// Event type.
	EventType uuid.UUID `json:"event_type"`
	// Logical source of the event.
	EventSource uuid.UUID `json:"event_source"`
	// Optional URI describing the event source.
	EventSourceUri *uuid.UUID `json:"event_source_uri,omitempty"`
	// Optional URI of the affected entity.
	AffectedEntityUri *uuid.UUID `json:"affected_entity_uri,omitempty"`
	// Optional human-readable message.
	Message *uuid.UUID `json:"message,omitempty"`
	// JSON body of the event (arbitrary key/value map). 
	Payload map[string]interface{} `json:"payload,omitempty"`
	// Optional URI to an external payload.
	PayloadUri *uuid.UUID `json:"payload_uri,omitempty"`
	// Arbitrary string key/value metadata.
	Metadata map[string]uuid.UUID `json:"metadata"`
	// Optional string key/value tags.
	Tags map[string]uuid.UUID `json:"tags,omitempty"`
	// Event timestamp.
	Timestamp time.Time `json:"timestamp"`
	// Identifier of the creator/producer.
	CreatedBy uuid.UUID `json:"created_by"`
	// MD5 hash of the canonical event representation.
	Md5Hash uuid.UUID `json:"md5_hash" validate:"regexp=^[A-Fa-f0-9]{32}$"`
	// Processing context for consumers (arbitrary key/value map). 
	Context map[string]interface{} `json:"context,omitempty"`
	// Optional URI to external context.
	ContextUri *uuid.UUID `json:"context_uri,omitempty"`
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(id uuid.UUID, sessionId uuid.UUID, requestId uuid.UUID, tenantId uuid.UUID, eventType uuid.UUID, eventSource uuid.UUID, metadata map[string]uuid.UUID, timestamp time.Time, createdBy uuid.UUID, md5Hash uuid.UUID) *Event {
	this := Event{}
	this.Id = id
	this.SessionId = sessionId
	this.RequestId = requestId
	this.TenantId = tenantId
	this.EventType = eventType
	this.EventSource = eventSource
	this.Metadata = metadata
	this.Timestamp = timestamp
	this.CreatedBy = createdBy
	this.Md5Hash = md5Hash
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetId returns the Id field value
func (o *Event) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Event) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Event) SetId(v uuid.UUID) {
	o.Id = v
}

// GetSessionId returns the SessionId field value
func (o *Event) GetSessionId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *Event) GetSessionIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *Event) SetSessionId(v uuid.UUID) {
	o.SessionId = v
}

// GetRequestId returns the RequestId field value
func (o *Event) GetRequestId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *Event) GetRequestIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *Event) SetRequestId(v uuid.UUID) {
	o.RequestId = v
}

// GetTenantId returns the TenantId field value
func (o *Event) GetTenantId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Event) GetTenantIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Event) SetTenantId(v uuid.UUID) {
	o.TenantId = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *Event) GetOwnerId() uuid.UUID {
	if o == nil || IsNil(o.OwnerId) {
		var ret uuid.UUID
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetOwnerIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *Event) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given uuid.UUID and assigns it to the OwnerId field.
func (o *Event) SetOwnerId(v uuid.UUID) {
	o.OwnerId = &v
}

// GetEventType returns the EventType field value
func (o *Event) GetEventType() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventTypeOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *Event) SetEventType(v uuid.UUID) {
	o.EventType = v
}

// GetEventSource returns the EventSource field value
func (o *Event) GetEventSource() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventSourceOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventSource, true
}

// SetEventSource sets field value
func (o *Event) SetEventSource(v uuid.UUID) {
	o.EventSource = v
}

// GetEventSourceUri returns the EventSourceUri field value if set, zero value otherwise.
func (o *Event) GetEventSourceUri() uuid.UUID {
	if o == nil || IsNil(o.EventSourceUri) {
		var ret uuid.UUID
		return ret
	}
	return *o.EventSourceUri
}

// GetEventSourceUriOk returns a tuple with the EventSourceUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetEventSourceUriOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.EventSourceUri) {
		return nil, false
	}
	return o.EventSourceUri, true
}

// HasEventSourceUri returns a boolean if a field has been set.
func (o *Event) HasEventSourceUri() bool {
	if o != nil && !IsNil(o.EventSourceUri) {
		return true
	}

	return false
}

// SetEventSourceUri gets a reference to the given uuid.UUID and assigns it to the EventSourceUri field.
func (o *Event) SetEventSourceUri(v uuid.UUID) {
	o.EventSourceUri = &v
}

// GetAffectedEntityUri returns the AffectedEntityUri field value if set, zero value otherwise.
func (o *Event) GetAffectedEntityUri() uuid.UUID {
	if o == nil || IsNil(o.AffectedEntityUri) {
		var ret uuid.UUID
		return ret
	}
	return *o.AffectedEntityUri
}

// GetAffectedEntityUriOk returns a tuple with the AffectedEntityUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAffectedEntityUriOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.AffectedEntityUri) {
		return nil, false
	}
	return o.AffectedEntityUri, true
}

// HasAffectedEntityUri returns a boolean if a field has been set.
func (o *Event) HasAffectedEntityUri() bool {
	if o != nil && !IsNil(o.AffectedEntityUri) {
		return true
	}

	return false
}

// SetAffectedEntityUri gets a reference to the given uuid.UUID and assigns it to the AffectedEntityUri field.
func (o *Event) SetAffectedEntityUri(v uuid.UUID) {
	o.AffectedEntityUri = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Event) GetMessage() uuid.UUID {
	if o == nil || IsNil(o.Message) {
		var ret uuid.UUID
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetMessageOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Event) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given uuid.UUID and assigns it to the Message field.
func (o *Event) SetMessage(v uuid.UUID) {
	o.Message = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *Event) GetPayload() map[string]interface{} {
	if o == nil || IsNil(o.Payload) {
		var ret map[string]interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Payload) {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *Event) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *Event) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

// GetPayloadUri returns the PayloadUri field value if set, zero value otherwise.
func (o *Event) GetPayloadUri() uuid.UUID {
	if o == nil || IsNil(o.PayloadUri) {
		var ret uuid.UUID
		return ret
	}
	return *o.PayloadUri
}

// GetPayloadUriOk returns a tuple with the PayloadUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetPayloadUriOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.PayloadUri) {
		return nil, false
	}
	return o.PayloadUri, true
}

// HasPayloadUri returns a boolean if a field has been set.
func (o *Event) HasPayloadUri() bool {
	if o != nil && !IsNil(o.PayloadUri) {
		return true
	}

	return false
}

// SetPayloadUri gets a reference to the given uuid.UUID and assigns it to the PayloadUri field.
func (o *Event) SetPayloadUri(v uuid.UUID) {
	o.PayloadUri = &v
}

// GetMetadata returns the Metadata field value
func (o *Event) GetMetadata() map[string]uuid.UUID {
	if o == nil {
		var ret map[string]uuid.UUID
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Event) GetMetadataOk() (map[string]uuid.UUID, bool) {
	if o == nil {
		return map[string]uuid.UUID{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Event) SetMetadata(v map[string]uuid.UUID) {
	o.Metadata = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Event) GetTags() map[string]uuid.UUID {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]uuid.UUID
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetTagsOk() (map[string]uuid.UUID, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]uuid.UUID{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Event) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]uuid.UUID and assigns it to the Tags field.
func (o *Event) SetTags(v map[string]uuid.UUID) {
	o.Tags = v
}

// GetTimestamp returns the Timestamp field value
func (o *Event) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Event) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Event) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Event) GetCreatedBy() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Event) GetCreatedByOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Event) SetCreatedBy(v uuid.UUID) {
	o.CreatedBy = v
}

// GetMd5Hash returns the Md5Hash field value
func (o *Event) GetMd5Hash() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Md5Hash
}

// GetMd5HashOk returns a tuple with the Md5Hash field value
// and a boolean to check if the value has been set.
func (o *Event) GetMd5HashOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Md5Hash, true
}

// SetMd5Hash sets field value
func (o *Event) SetMd5Hash(v uuid.UUID) {
	o.Md5Hash = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Event) GetContext() map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return map[string]interface{}{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Event) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *Event) SetContext(v map[string]interface{}) {
	o.Context = v
}

// GetContextUri returns the ContextUri field value if set, zero value otherwise.
func (o *Event) GetContextUri() uuid.UUID {
	if o == nil || IsNil(o.ContextUri) {
		var ret uuid.UUID
		return ret
	}
	return *o.ContextUri
}

// GetContextUriOk returns a tuple with the ContextUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetContextUriOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.ContextUri) {
		return nil, false
	}
	return o.ContextUri, true
}

// HasContextUri returns a boolean if a field has been set.
func (o *Event) HasContextUri() bool {
	if o != nil && !IsNil(o.ContextUri) {
		return true
	}

	return false
}

// SetContextUri gets a reference to the given uuid.UUID and assigns it to the ContextUri field.
func (o *Event) SetContextUri(v uuid.UUID) {
	o.ContextUri = &v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["session_id"] = o.SessionId
	toSerialize["request_id"] = o.RequestId
	toSerialize["tenant_id"] = o.TenantId
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	toSerialize["event_type"] = o.EventType
	toSerialize["event_source"] = o.EventSource
	if !IsNil(o.EventSourceUri) {
		toSerialize["event_source_uri"] = o.EventSourceUri
	}
	if !IsNil(o.AffectedEntityUri) {
		toSerialize["affected_entity_uri"] = o.AffectedEntityUri
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.PayloadUri) {
		toSerialize["payload_uri"] = o.PayloadUri
	}
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["md5_hash"] = o.Md5Hash
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ContextUri) {
		toSerialize["context_uri"] = o.ContextUri
	}
	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"session_id",
		"request_id",
		"tenant_id",
		"event_type",
		"event_source",
		"metadata",
		"timestamp",
		"created_by",
		"md5_hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvent := _Event{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvent)

	if err != nil {
		return err
	}

	*o = Event(varEvent)

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


